name: TDLib Linux

on: [push]

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler: [clang, musl]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependency
        run: |
          sudo apt-get install -y gperf libssl-dev zlib1g-dev doxygen
      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        if: matrix.compiler == "clang"
        with:
          version: 3.9
          platform: x64
      - name: Set up musl
        if: matrix.compiler == "musl"
        run: |
          sudo apt-get install -y musl-tools
      - name: Build TDLib
        run: |
          if [ "$MATRIX_COMPILER" == "clang" ]; then
            export _CXX=clang++-3.8
            export _CC=clang-3.8
          fi
          if [ "$MATRIX_COMPILER" == "musl" ]; then
            export _CXX=musl-g++
            export _CC=musl-gcc
          fi
          echo "CXX: $_CXX, CC: $_CC"
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . -- -j2
          mkdir -p ../out
          mv ./bin/tdlib_json_cli ../out/tdlib_json_cli_linux
        env:
          MATRIX_COMPILER: ${{ matrix.compiler }}
      - name: Generate types
        run: |
          cd td
          doxygen
          cd ..
          cd types-generator
          npm i
          cd ..
          node ./types-generator/index.js
          mv types.json out/types.json
      - name: Upload binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: out
          path: out
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: out
      - name: Release
        uses: fnkr/github-action-ghr@v1
        env:
          GHR_PATH: out/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
